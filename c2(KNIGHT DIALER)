
class Solution {

    static final int MOD = 1000000007;
    
    // Map representing the knight moves from each digit
    private static final Map<Integer, List<Integer>> jumps = new HashMap<>();
    
    // Static block to initialize the possible knight moves
    static {
        jumps.put(0, Arrays.asList(4, 6));
        jumps.put(1, Arrays.asList(6, 8));
        jumps.put(2, Arrays.asList(7, 9));
        jumps.put(3, Arrays.asList(4, 8));
        jumps.put(4, Arrays.asList(3, 9, 0));
        jumps.put(5, Arrays.asList()); // 5 can't be reached by the knight
        jumps.put(6, Arrays.asList(1, 7, 0));
        jumps.put(7, Arrays.asList(2, 6));
        jumps.put(8, Arrays.asList(1, 3));
        jumps.put(9, Arrays.asList(2, 4));
    }
    
    // dp array for memoization
    private long[][] dp;
    
    public int knightDialer(int n) {
        // Initialize dp array to store results for each (remaining steps, digit)
        dp = new long[n][10];
        for (long[] row : dp) {
            Arrays.fill(row, -1);
        }
        
        long totalWays = 0;
        
        // Sum the results for all starting digits (0-9)
        for (int digit = 0; digit <= 9; digit++) {
            totalWays = (totalWays + solve(n - 1, digit)) % MOD;
        }
        
        return (int) totalWays;
    }
    
    
    // Function to solve the knight dialer problem using memoization
    private long solve(int rem, int digit) {
        if (rem == 0) {
            return 1; // Base case: one valid number when no moves are left
        }
        
        // Return memoized result if already computed
        if (dp[rem][digit] != -1) {
            return dp[rem][digit];
        }
        
        long ans = 0;
        
        // Iterate through all the possible next moves
        for (int nextDigit : jumps.get(digit)) {
            ans = (ans + solve(rem - 1, nextDigit)) % MOD;
        }
        
        // Memoize the result
        dp[rem][digit] = ans;
        return ans;
    }
   
}
